// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _LIBMIDGARD2MM_LIBMIDGARD2_H
#define _LIBMIDGARD2MM_LIBMIDGARD2_H

#include <libmidgard2mmconfig.h>


#include <glibmm.h>

/* Copyright (c) 2010  Joe Hacker <joe@example.com>
 *
 * This file is part of libmidgard2mm.
 *
 * libmidgard2mm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * libmidgard2mm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


#include <glibmm.h>

#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _MidgardConfig MidgardConfig;
typedef struct _MidgardConfigClass MidgardConfigClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Midgard
{ class Config_Class; } // namespace Midgard
#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _MidgardConnection MidgardConnection;
typedef struct _MidgardConnectionClass MidgardConnectionClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Midgard
{ class Connection_Class; } // namespace Midgard
namespace Midgard
{


class Config : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef Config CppObjectType;
  typedef Config_Class CppClassType;
  typedef MidgardConfig BaseObjectType;
  typedef MidgardConfigClass BaseClassType;

private:  friend class Config_Class;
  static CppClassType config_class_;

private:
  // noncopyable
  Config(const Config&);
  Config& operator=(const Config&);

protected:
  explicit Config(const Glib::ConstructParams& construct_params);
  explicit Config(MidgardConfig* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~Config();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  MidgardConfig*       gobj()       { return reinterpret_cast<MidgardConfig*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const MidgardConfig* gobj() const { return reinterpret_cast<MidgardConfig*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  MidgardConfig* gobj_copy();

private:


public:
  Config();

public:
  
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  void read_file(const Glib::ustring& name, bool user_file);
#else
  void read_file(const Glib::ustring& name, bool user_file, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

public:
  
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  void save_file(const Glib::ustring& name, bool user_file);
#else
  void save_file(const Glib::ustring& name, bool user_file, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED

public
  
  void create_blobdir();
public
  
#ifdef GLIBMM_EXCEPTIONS_ENABLED
  void read_file_at_path(const Glib::ustring& name);
#else
  void read_file_at_path(const Glib::ustring& name, std::auto_ptr<Glib::Error>& error);
#endif //GLIBMM_EXCEPTIONS_ENABLED


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::
#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


};


class Connection : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef Connection CppObjectType;
  typedef Connection_Class CppClassType;
  typedef MidgardConnection BaseObjectType;
  typedef MidgardConnectionClass BaseClassType;

private:  friend class Connection_Class;
  static CppClassType connection_class_;

private:
  // noncopyable
  Connection(const Connection&);
  Connection& operator=(const Connection&);

protected:
  explicit Connection(const Glib::ConstructParams& construct_params);
  explicit Connection(MidgardConnection* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~Connection();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  MidgardConnection*       gobj()       { return reinterpret_cast<MidgardConnection*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const MidgardConnection* gobj() const { return reinterpret_cast<MidgardConnection*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  MidgardConnection* gobj_copy();

private:


public:
  Connection();

public:
  
  void open_config(MidgardConfig *config);


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

protected:
  //GTK+ Virtual Functions (override these to change behaviour):
#ifdef GLIBMM_VFUNCS_ENABLED
#endif //GLIBMM_VFUNCS_ENABLED

  //Default Signal Handlers::
#ifdef GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED
#endif //GLIBMM_DEFAULT_SIGNAL_HANDLERS_ENABLED


};

} // namespace Midgard


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Midgard::Config
   */
  Glib::RefPtr<Midgard::Config> wrap(MidgardConfig* object, bool take_copy = false);
}


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Midgard::Connection
   */
  Glib::RefPtr<Midgard::Connection> wrap(MidgardConnection* object, bool take_copy = false);
}


#endif /* _LIBMIDGARD2MM_LIBMIDGARD2_H */

